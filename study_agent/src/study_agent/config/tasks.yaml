analyze_documents_task:
  description: >
    You must analyze the following PDF files using the prompt and the topic (X): {pdf_files}

    For each PDF file:
    1. Use FileReadTool to read the content from all pdf files
    2. Extract key concepts and information
    3. Focus on content related to: X = {topic}
    4. Create a structured analysis following the prompt below:

    Follow these instructions:
    <prompt>
    {system_prompt}
    </prompt>

    IMPORTANT:
    - You MUST read ALL PDF file using FileReadTool
    - Focus on content relevant to: X = {topic}

    X = {topic}

  expected_output: >
    A comprehensive analysis containing:
    - Key concepts from all PDF files
    - Clear structure and organization following prompt
  agent: document_analyzer

format_math_task:
  description: >
    Format all mathematical content using proper LaTeX notation:
    1. Convert inline math expressions using $...$ syntax
    2. Format display equations using $$...$$ syntax
    3. Properly escape currency symbols (R\\$, \\$)
    4. Format special characters (‚àà ‚Üí \in, ‚àë ‚Üí \sum, etc.)
    5. Add proper subscripts and Greek letters
    6. Format ellipsis using \ldots in math mode
    7. Add proper spacing with \, where needed
    8. Don't modify existing correctly formatted LaTeX

    Example mathematical replacements:
    - F(X) = œÉ({Xk : k = 0, 1, ..., T}) ‚Üí $F(X) = \sigma(\{X_k : k = 0, 1, \ldots, T\})$
    - {X(t1) ‚àà B1, X(t2) ‚àà B2, ..., X(tk) ‚àà Bk} ‚Üí $\{X(t_1) \in B_1, X(t_2) \in B_2, \ldots, X(t_k) \in B_k\}$
    - P(X ‚â§ x) ‚Üí $P(X \leq x)$
    - E[X] = ‚à´ x dF(x) ‚Üí $E[X] = \int x \, dF(x)$
    - œÉ¬≤ = E[(X - Œº)¬≤] ‚Üí $\sigma^2 = E[(X - \mu)^2]$
    - ‚àë(xi - xÃÑ)¬≤ ‚Üí $\sum(x_i - \bar{x})^2$

    ‚ö†Ô∏è CURRENCY FORMATTING (IMPORTANT):
    Currency symbols must be escaped to prevent markdown conflicts!

    CORRECT Currency Examples:
    - R$ 100,00 ‚Üí R\\$ 100,00
    - $ 50.00 ‚Üí \\$ 50.00
    - The price is R$ 75,50 ‚Üí The price is R\\$ 75,50
    - Cost: $ 25.99 ‚Üí Cost: \\$ 25.99

    INCORRECT Currency Examples (DO NOT DO THIS):
    ‚ùå R$ 100,00 (unescaped R$)
    ‚ùå $ 50.00 (unescaped $)
    ‚ùå R\$ 100,00 (single backslash)
    ‚ùå \$ 50.00 (single backslash)

    Guidelines:
    1. Preserve all original text content
    2. Only modify mathematical expressions and currency symbols
    3. Use $ for inline math and $$ for display math
    4. Format special characters: ‚àà ‚Üí \in, ‚àë ‚Üí \sum, ‚à´ ‚Üí \int, etc.
    5. Add proper subscripts: x1 ‚Üí x_1, xn ‚Üí x_n
    6. Format Greek letters: œÉ ‚Üí \sigma, Œº ‚Üí \mu
    7. Use \ldots for ellipsis in math mode
    8. Add proper spacing with \, where needed
    9. Don't modify existing correctly formatted LaTeX expressions
    10. ALWAYS escape currency symbols with double backslash:
        - R$ ‚Üí R\\$
        - $ ‚Üí \\$

    Remember: Currency symbols need double backslashes to display correctly in markdown!
  expected_output: >
    Content with:
    - Properly formatted LaTeX mathematical expressions
    - Correctly escaped currency symbols
    - Consistent notation for special characters
    - Preserved original content structure
    - All examples properly formatted according to guidelines
  agent: math_formatter

create_diagrams_task:
  description: >
    Create Mermaid diagrams to visualize:
    1. Mathematical relationships and dependencies
    2. Theoretical frameworks and proofs
    3. Algorithm flows and computational processes
    4. Model architectures and hierarchies
    
    ‚ö†Ô∏è CRITICAL REQUIREMENTS:
    1. ALWAYS use double quotes (" ") around ALL text in diagrams
    2. AVOID losangles, decision nodes, and mind map structures
    3. Use subgraphs to group related concepts
    4. Include clear directional relationships
    5. Break down complex formulas into components
    6. Add diagrams inline where they best support the text
    7. Replace any existing <image: ...> blocks with appropriate diagrams
    8. Always start with a first overview diagram
    9. Keep diagrams focused and not too complex
    
    PREFERRED DIAGRAM TYPES:
    - Mathematical decompositions
    - Component relationships
    - Theoretical hierarchies
    - Formula breakdowns
    - Architectural structures
    - Flowcharts and sequence diagrams
    
    FORMAT REQUIREMENTS:
    ```mermaid
    [diagram code here]
    ```

    Example structures:

    ```mermaid
    graph TD
        subgraph "Mathematical Decomposition"
            direction TB
            A["Complete Formula: MSE = Bias¬≤ + Variance + Œµ"]
            B["Bias Component: (E[fÃÇ(x)] - f(x))¬≤"]
            C["Variance Component: E[(fÃÇ(x) - E[fÃÇ(x)])¬≤]"]
            D["Irreducible Error: var(Œµ)"]
            A --> B
            A --> C
            A --> D
        end
    ```

    ```mermaid
    graph LR
        subgraph "Ridge Regression Components"
            direction LR
            A["Loss Function"] --> B["RSS Term: ||y - XŒ≤||¬≤"]
            A --> C["Penalty Term: Œª||Œ≤||¬≤"]
            B --> D["Optimization Objective"]
            C --> D
        end
    ```

    ```mermaid
    graph TB
        subgraph "Theoretical Framework"
            A["Main Theorem"] --> B["Supporting Lemma 1"]
            A --> C["Supporting Lemma 2"]
            B & C --> D["Resulting Corollary"]
            D --> E["Mathematical Implications"]
        end
    ```

    Focus on technical accuracy and academic rigor in diagram creation,
    using proper mathematical notation in labels. Do not modify the
    original text - only add Mermaid diagram blocks where helpful.
  expected_output: >
    Content enhanced with:
    - Mathematical relationship diagrams
    - Theoretical framework visualizations
    - Algorithm flow diagrams
    - Model architecture diagrams
    All using proper Mermaid syntax and mathematical notation
  agent: diagram_creator

generate_examples_task:
  description: >
    Add practical numerical examples to reinforce concepts:
    1. Create step-by-step calculations
    2. Provide concrete parameter values
    3. Include comparison tables
    4. Show practical applications

    Example types to add based on linear regression topics:
    - Bias-variance tradeoff calculations with specific datasets
    - Ridge and Lasso regularization with different Œª values
    - Matrix calculations for least squares estimation
    - Orthogonalization examples using Gram-Schmidt
    - Principal Component Analysis (PCA) with actual data
    - Cross-validation error calculations
    - Parameter estimation and confidence intervals
    - F-statistics and hypothesis testing examples
    - Subset selection comparisons with real predictors
    - Path algorithms with concrete coefficient values
    
    Required components:
    1. Use Python code with numpy/scipy/sklearn/pytorch when appropriate:
    ```python
    import numpy as np
    from sklearn.linear_model import LinearRegression
    # Example code
    ```

    2. Include visualizations using Mermaid when helpful:
    ```mermaid
    # Diagram showing relationships
    ```

    3. Show mathematical calculations step by step:
    $\text{Step 1: } \beta = (X^TX)^{-1}X^Ty$
    $\text{Step 2: } ...$

    4. Use tables for comparing methods:
    | Method | MSE | R¬≤ | Parameters |
    |--------|-----|----| ---------- |
    | OLS    | ... | ...| ...        |
    | Ridge  | ... | ...| ...        |

    5. Include real-world interpretations of results
    
    Format examples using:
    > üí° **Exemplo Num√©rico:**
    [Example content with actual numbers, calculations, and visualizations]
    
    Requirements:
    1. Preserve all existing content
    2. Format all mathematical expressions using LaTeX
    3. Use realistic parameter values
    4. Show intermediate calculation steps
    5. Explain the intuition behind the numbers
    6. Connect examples to theoretical concepts
    7. Include residual analysis where appropriate
    8. Compare different methods when relevant
    9. Use clear variable naming conventions
    10. Add error analysis and statistical tests

    Examples should demonstrate theoretical concepts through
    clear numerical calculations and real-world applications.
  expected_output: >
    Content enriched with:
    - Practical numerical examples
    - Step-by-step calculations
    - Comparison tables
    - Real-world applications
    - Python code snippets where relevant
    - Mathematical calculations with LaTeX
    - Method comparisons with tables
    - Clear explanations and interpretations
  agent: examples_generator

write_content_task:
  description: >
    Create final educational content by:
    1. Integrating all formatted mathematical content
    2. Incorporating generated diagrams
    3. Including numerical examples
    4. Ensuring clear structure and flow
    5. Removing any prompt artifacts or instructions
    
    Cleanup requirements:
    - Remove meta-instructions about formatting
    - Keep all mathematical formulas intact
    - Preserve diagrams and examples
    - Maintain section structure
    - Keep technical content and proofs
    - Preserve emojis with technical content
    
    Produce comprehensive educational material that combines
    theoretical foundations with practical applications.
  expected_output: >
    Complete educational content with:
    - Clear theoretical explanations
    - Properly formatted mathematics
    - Integrated diagrams
    - Practical examples
    - Consistent structure and formatting
    - No prompt artifacts or instructions
  agent: content_writer

cleanup_task:
  description: >
    Clean up prompt artifacts and instructions while preserving:
    1. All actual content and mathematical formulas
    2. Technical explanations and proofs
    3. Theorems, lemmas, and corollaries
    4. Diagrams and image descriptions
    5. References with actual content [^n]
    6. Section titles and headers
    7. Mermaid diagrams with actual content
    8. Mathematical notation ($, $$)
    9. Formatting (**, *, >, emojis) with technical content
    10. Proof endings ($\blacksquare$)
    11. Technical notes marked with emojis (‚ö†Ô∏è‚ùó‚úîÔ∏èüí°)
    
    Remove these types of artifacts:
    - "Seu cap√≠tulo deve ser constru√≠do..."
    - "Baseie seu cap√≠tulo exclusivamente..."
    - "Organize o conte√∫do logicamente..."
    - "Use $ para express√µes matem√°ticas..."
    - "Adicione lemmas e corol√°rios..."
    - "Lembre-se de usar $ em vez de..."
    - "Tenha cuidado para n√£o se desviar..."
    - "Exemplos t√©cnicos devem ser apenas em Python..."
    - "N√£o traduza nomes t√©cnicos..."
    - "Incorpore diagramas e mapas mentais..."
    - "Continue explicando em detalhe..."
    - "Deseja que eu continue com as pr√≥ximas se√ß√µes?"
    - References to "o contexto" or "conforme indicado no contexto"
    - Meta-instructions about formatting or structure
    - Any text discussing how to use Mermaid, LaTeX, or image tags
    - Instructions about how to write proofs or theorems
    - References to [^X], [^Y], [^Z] without actual content
    - Placeholder text like "{{ X }}" or "<X>"
    - "Nota:" or "Importante:" sections containing only instructions
    
    Guidelines:
    1. Remove only meta-instructions and prompt artifacts
    2. Ensure the flow remains natural after removing artifacts
    3. Keep all actual technical content intact
    4. Preserve formatting when used for actual content
    5. Keep proof endings but remove instructions about using them
    6. Keep technical notes with emojis, remove instructional ones
    7. Maintain document structure and readability
    8. Preserve all mathematical notation and diagrams

  expected_output: >
    Clean content with:
    - All technical content preserved
    - Mathematical notation intact
    - Document structure maintained
    - No prompt artifacts or instructions
    - Natural flow and readability
    - Preserved formatting for actual content
    - Kept technical notes and emojis
    - Removed all meta-instructions
  agent: cleanup_agent
